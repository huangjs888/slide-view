import { EventTarget, type GEvent } from '@huangjs888/gesture';
import type Gesture from '@huangjs888/gesture';
declare class SlideView extends EventTarget<IType, IEvent> {
    element: HTMLElement | null;
    contentEl: HTMLElement | null;
    leftEl: HTMLElement | null;
    rightEl: HTMLElement | null;
    leftActions: MergeAction | null;
    rightActions: MergeAction | null;
    friction: number;
    rebounce: number;
    duration: number;
    timing: Timing;
    _destory: boolean;
    _direction: Direction;
    _confirming: Confirm | null;
    _overshooting: boolean;
    _translate: number;
    _width: number;
    _offset: number;
    _startOffset: number;
    _startTranslate: number;
    _startPoint: number[] | null;
    _startAngle: number;
    _timestamp: number;
    _isMoving: boolean;
    _gesture: Gesture | null;
    _removeResize: (() => void) | null;
    constructor(options: IOption);
    setContent(content?: HTMLElement | string, dangerous?: boolean): void;
    setFriction(friction?: number): void;
    setRebounce(rebounce?: number): void;
    setDuration(duration?: number): void;
    setTiming(timing?: Timing): void;
    setDisable(disable?: boolean, direction?: Direction): void;
    setOvershoot(overshoot?: boolean, direction?: Direction): void;
    setThreshold(threshold?: number, direction?: Direction): void;
    setActions(actions?: IActionOption, direction?: Direction): void;
    toggle(direction?: Direction): Promise<void>;
    show(direction?: Direction): Promise<void>;
    hide(): Promise<void>;
    destory(): void;
}
export type Direction = 'left' | 'right' | 'both' | 'none';
export type Timing = 'linear' | 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | `cubic-bezier(${number},${number},${number},${number})`;
export type ActionStyle = 'drawer' | 'accordion';
export type Confirm = {
    direction: Direction;
    index: number;
};
export type MergeActionItem = {
    wrapper: HTMLElement;
    element: HTMLElement;
    width: number;
    gap: number[];
    fixedGap: boolean;
} & IActionItem;
export type MergeAction = {
    style: ActionStyle;
    disable: boolean;
    threshold: number;
    overshoot: boolean;
    overshootFreeSize: number;
    overshootEdgeSize: number;
    element: HTMLElement;
    width: number;
    gap: number;
    items: MergeActionItem[];
};
export type IActionItem = {
    className?: string;
    text?: string;
    icon?: string;
    color?: string;
    background?: string;
    confirm?: {
        className?: string;
        text?: string;
        icon?: string;
        color?: string;
        background?: string;
    };
    collapse?: boolean;
    gap?: number | number[];
    fixedGap?: boolean;
    data?: any;
};
export type IActionOption = {
    className?: string;
    style?: ActionStyle;
    disable?: boolean;
    threshold?: number;
    overshoot?: boolean;
    overshootEdgeSize?: number;
    overshootFreeSize?: number;
    items?: IActionItem[];
};
export type IOption = {
    className?: string;
    container: HTMLElement | string;
    content?: HTMLElement | string;
    friction?: number;
    rebounce?: number;
    duration?: number;
    timing?: Timing;
    leftActions?: IActionOption;
    rightActions?: IActionOption;
};
export type IType = 'show' | 'hide' | 'press' | 'longPress' | 'doublePress' | 'buttonPress' | 'buttonConfirm';
export type IEvent = {
    currentTarget: HTMLElement;
    timestamp: number;
    sourceEvent: GEvent | null;
    direction?: Direction;
    index?: number;
    data?: any;
};
export default SlideView;
